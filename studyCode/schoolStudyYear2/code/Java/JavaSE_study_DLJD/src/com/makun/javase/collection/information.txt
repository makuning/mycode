非常非常重要！！！！（建议全文背诵）


集合？
    集合就是一个容器，数组就是一种集合
    集合实际上就是一个容器，可以用来容纳其他类型的数据
    集合是一个载体，可以一次容纳多个对象
    例如：在实际开发中，数据库有10条数据封装成10个Java对象，然后将10个Java对象放到
    某一个集合当中，将集合传到前端，然后遍历集合，将一个数据一个数据展现出来

// 集合不能直接存储基本数据类型，集合也不能直接存储Java对象，集合当中存储的都是java对象的内存地址
    集合在Java中本身是一个Java对象

// 集合里面可以存储集合，集合当中都是存储的对象的地址

// Java中每一个不同的集合，底层都会对应不同的数据结构，往不同的集合中存储数据，等于将数据放到了不同的数据结构当中。

// 所有的集合类和集合接口都在java.util包下

// 集合的继承结构图

/*
    接口Collection -（的父接口）-> Iterable（表示可迭代的，可遍历的）
    接口Collection -（的子接口）-> List , Set

    // List \ Set
        List ： 有序可重复
            有序：存进去是这个顺序，取出来还是这个数据，储存的元素有下标【从0起标】
            可重复：可以存多个相同的地址

        Set : 无序不可重复
            无序：存进去的顺序和取出来顺序不一样
            不可重复：元素没有下标，不可重复

        // List下就是实现类了重点有（ArrayList LinkedList Vector）
            ArrayList：
                底层采用了数组这种数据结构（非线程安全的）

            LinkedList：
                底层采用了双向链表数据结构

            Vector：
                底层采用了数组这种数据结构（线程安全的）
                它所有的方法都有synchronized关键字修饰，所以是线程安全的（但是效率较低，使用较少）


        // Set下也是实现类，重点有（HashSet TreeSet）
            HashSet：
                实际上，HashSet在new的时候，底层实际上new了一个HashMap集合。
                向HashSet集合中存储元素，实际上存储到了HashMap集合中了
                HashMap集合是一个哈希表数据结构

            TreeSet：
                SortedSet 的父接口是 Set。
                    SortedSet由于继承了Set集合，所以他的特点也是无序不可重复
                    但是放在SortedSet中的元素可以自动排序，称为可排序集合

                TreeSet 是SortedSet的实现类
                TreeSet集合底层实际上是TreeMap
                new这个TreeSet集合，底层实际上new了一个TreeMap集合
                向TreeSet集合中放数据的时候，实际上存储到了TreeMap集合中了
                TreeMap集合底层是二叉树结构


    // 迭代的含义
        迭代是重复反馈过程的活动,其目的通常是为了逼近所需目标或结果。
        每一次对过程的重复称为一次“迭代”
        而每一次迭代得到的结果会作为下一次迭代的初始值

    // 泛化的含义
        由具体的、个别的扩大为一般的
        比如：“先生”也用于称呼女性，战场也用于称呼考场、赛场，就是词义泛化。


    Iterable：
        超级父接口，所有集合的接口，表示所有的集合都是可迭代的
        iterator(); // 返回一个Iterator接口（实例对象）

    Iterator：
        迭代器（集合的迭代器对象）
        hasNext();
        next();
        remove();

    Java中结合分为两大类
        一类是单个方式存储元素：
            单个方式存储元素：这一类的超级父接口：java.util.Collection;
        一类是以键值对的方式存储元素
            以键值对的方式存储的元素：这一类集合中的超级父类接口：java.util.Map;
*/


/*
    Map接口

    1、Map集合和Collection集合没有关系
    2、Map集合以key和value的这种键值对的方式存储元素
    3、key和value都是存储Java对象的内存地址
    4、所有Map集合的key是无序不可重复的，Map集合的key和Set集合存储元素特点相同

    Map重要的实现类（HashMap Hashtable）
        HashMap：
            （非线程安全的）
            HashMap底层是哈希表数据结构

        Hashtable：
            使用比较少，效率比较低
            （线程安全的）
            Hashtable底层也是哈希表数据结构
            现在使用少了，因为它所有的方法都带有synchronized关键字，
            效率较低，控制线程安全有其他更好的方案

            它的子类（Properties UIDefaults）
                Properties：
                    属性类
                    Properties是线程安全的，因为继承Hashtable
                    另外：Properties存储元素的时候也是采用key和value的形式存储，
                    并且key和value只支持String类型，不支持其他类型

    Map重要的子接口（SortedMap）
        SortedMap：
            它的实现类有：TreeMap
                TreeMap：
                    TreeMap底层的数据结构是一个二叉树。
            SortedMap的key存储元素的特点？
                无序不可重复
                放在SortedMap集合 的 key部分的元素会自动按照大小顺序排序
                称为可排序的集合


*/


/*
    小总结（总结所有的实现类）：
        ArrayList：底层是数组
        LinkedList：底层是双向链表
        Vector：底层是数组，线程安全的，效率较低，使用较少
        HashSet：底层是HashMap，放到HashSet集合中的元素等同于放到HashMap集合key部分了
        TreeSet：底层是TreeMap，放到TreeSet集合中的元素等同于放到了TreeMap集合key部分了
        HashMap：底层是哈希表数据结构
        Hashtable：底层也是哈希表，只不过线程是安全的，效率较低，使用较少了
        Properties：是线程安全的，并且key和value只能存储字符串String
        TreeMap；底层是二叉树，TreeMap集合的key可以自动按照大小顺序排序

    List集合存储元素的特点
        有序可重复
        有序：存进去的顺序和取出的顺序相同，每一个元素都有下标
        可重复：存进去1可以再存储一个1

    Set（Map）集合存储元素的特点
        无序不可重复
        无序：存进去的顺序和取出的顺序不一定相同，另外Set集合中元素没有下标
        不可重复：存进去1，不能再存储1了
    SortedSet集合存储元素的特点

        首先是无序不可重复的，但是SortedSet集合中的元素是可排序的
        无序：存进去的顺序和取出的顺序不一定相同，另外Set集合中元素没有下标
        可重复：存进去1可以再存储一个1
        可排序：可以按照大小顺序排列Map

    Map集合的key，就是一个Set集合
    往Set集合中放数据，实际上放到了Map集合的key部分
*/



// Collection接口的学习
/*
没有使用“泛型”之前，Collection中可以存储Object的所有子类型
使用了“泛型”之后，Collection中只能存储某个具体的类型        // 例如： 集合类<具体类型>


Collection中的常用方法
    add(需要存储的数据);   // 存储方法，如果存储的数据是基本数据类型，会自动装箱
    size();             // 获取集合中元素的个数（返回一个个数）
    clear();            // 移除集合中所有的元素（清空集合）
    contains(需要查的数据的引用);    // 如果集合中包含指定的元素，则返回true，否则，则false
    remove(需要删除的数据的引用);    // 删除集合中某个元素
    isEmpty();          // 判断集合是否为空（返回false或者true）（元素个数是否为零）
    iterator();         // 返回集合的迭代器
    toArray();          // 集合转换为数组

    // 迭代器重点讲解：iterator();
        因为他是Collection接口的，所以Collection都能用，而实现Map接口的则不能用
        iterator()方法返回一个迭代器（一个接口的实现类）
            ** 集合结构改变，迭代器必须重新获取 **
                结构改变情况
                    1、没有使用迭代器添加了元素
                    2、没有使用迭代器删除了元素
                    注：使用迭代器的删除和添加方法，不需要重新获取迭代器

            iterator中的方法：
                hasNext();  // 如果仍有元素可以迭代，则返回true，否则为false
                next();     // 返回迭代的下一个元素
                    返回值类型必须是Object
                remove();   //

                示例：
                    // 新建一个集合
                    Collection c = new ArrayList();
                    // 获取集合的迭代器
                    Iterator it = c.iterator();
                    // 如果迭代的集合下一个还有元素，则输出（调用元素的同String方法）
                    if (it.hasNext()) {
                        Object obj = it.next();
                        System.out.println(obj);
                    }

    Collection中contains()、remove()方法讲解
            contains(需要查的数据的引用);    // 如果集合中包含指定的元素，则返回true，否则，则false
                contains()底层调用了equals方法，所以如果找的是字符串，只要内容相同就会返回true
                所以：放在集合中的元素，需要重写equals方法！！！

            remove(需要删除的数据的引用);    // 删除集合中某个元素
                remove*()底层也调用了equals方法，只要能用equals匹配为true的元素就会被remove删除



    因为List集合有下标，所以List有自己特有的遍历方式（通过下标遍历）
        // new一个属于List接口的ArrayList集合
        List myList = new ArrayList();

        // 使用List接口的特殊方法来遍历ArrayList集合
        for (int i = 0; i < myList.size(); i++) {
            Object obj = myList.get(i);
            System.out.println(obj);
        }

    List接口中常用方法
        void add(int index,Object element)
            在List集合指定的下标位置添加指定元素
            使用不多，它的效率较低

        Object get(int index)
            根据指定下标来取元素

        int indexOf(Object o)
            获取指定对象，第一次出现处的索引

        int lastIndexOf(Object o)
            获取指定对象，最后一次出现处的索引

        Object remove(int index)
            删除指定下标的元素

        Object set(int index,Object element)
            修改指定位置的元素

    ArrayList集合
        1、它的初始化容量是10（默认）（当添加了第一个元素后才设置为10个长度）
        2、集合底层是一个Object数组
        3、构造
            public ArrayList();
            public ArrayList(int initialCapacity);
                例子：
                    List arraylist = new ArrayList(20);
                    // 长度和大小的概念不同
                    arraylist.size() != 20;
        4、扩容到原容量的1.5倍
        5、建议只当一个预估计的初始化容量，减少数据的扩容次数，这是ArrayList集合的重要优化策略
            >> ：表示二进制右移
            << ：表示二进制左移
                (>> 1)例子：   // 右移一位

                    00101001    --> 41
                    00010100    --> 20
        数组优点：
            1、检索效率比较高

        数组缺点：
            1、随机增删效率比较低
            2、数组无法存储大数据量
            （很难在内存中找到大的连续空间）

        注：
            数组向元素末添加元素的效率还是很高的（只有扩容问题拖效率）
            用那个集合最多？
                ArrayList
                因为一般不会往数组中间添加元素，往数组末尾添加元素效率不受影响，查找最快
*/



/*
// 链表数据结构：基本的单元是节点Node（可以自己写一写单链表）
    自写思路；
        一个Node类，表示节点
            节点中有两个属性
                1、存储的数据：Object
                2、下一节点的内存地址：Node
                3、有参构造方法

        一个Link类，表示单链表集合
                1、头节点Node
                2、添加方法
                3、删除方法
                4、修改方法
                5、查找方法
                6、size属性
                7、size() 方法
                8、lastNode() 递归方法（找到单链表中最后一个节点）




    对于单向链表来说，任何一个节点Node中都有两个属性：
        1、存储的数据
        2、下一节点的内存地址

        它的优缺点
        优点：
            随机增删元素效率较高，因为增删元素不涉及到大量元素位移
        缺点：
            查询效率较低，每一次查找某个元素的时候都需要从头节点开始往下遍历



    LinkedList，双向链表集合
        随机增删的业务较多时，建议使用LinkedList
        缺点：每次检索都是从头节点开始查找的，所以检索效率较低
        双向链表的节点，也是节点为一个单位
            每个节点由三部分组成
                1、存储的数据
                2、上一个节点的内存地址
                3、下一个节点的内存地址
*/

/*
Vector集合
    1、底层也是一个数组
    2、初始化容量：10
    3、怎么扩容的？
*/