******************* 注解 *****************

/*
3、注解
    3.1、注解，或者叫做注释类型，英文单词是: Annotation
    3.2、注解Annotation是一种引用数据类型。编译之后也是生成xxx.class文件。
    3.3、怎么自定义注解呢?语法格式?
    [修饰符列表] @interface 注解类型名{

    }
    3.4、注解怎么使用，用在什么地方?
        第一:注解使用时的语法格式是:@注解类型名

        第二:注解可以出现在类上、属性上、方法.上、变量.上等....
        注解还可以出现在注解类型上。.

    3.5、 JDK内置了哪些注解呢?
        java . lang包下的注释类型:
            掌握:
            Deprecated用@Deprecated 注释的程序元素,
            不鼓励程序员使用这样的元素，邇常是因为它很危险或存在更好的选择。

            掌握:
            Override表示-一个方法声明打算重写超类中的另一个方法声明。

            不用掌握:
            SuppressWarnings指示应该在注释元素( 以及包含在该注释元索中的
            所有程序元素)中取消显示指定的编译器警告。

    3.6、元注解
        什么 是元注解?
        用来标注注解类型”的"注解”，称为元注解。
        常见的元注解有哪些?
            Target
            Retention

        关于Target注解:
            这是一一个元注解，用来标注"注解类型”的\注解"
            这个Target注解用来标注"被标注的注解"可以出现在哪些位置上。
            @Target (ElementType . METHOD):表示"被标注的注解"只能出现在方法上。
            @Target (value= {CONSTRUCTOR, FIELD， LOCAL_ VARIABLE, METHOD, PACKAGE, MODULE, PA
                表示该注解可以出现在:
                    构造方法上
                    字段.上
                    局部变量上
                    方法上


        关于Retention注解:
            这是一一个元注解，用来标注“注解类型”的注解"
            这个Retention注解用来标注\被标注的注解"最终保存在哪里。
            @Retention (RetentionPolicy . SOURCE):表示该注解只被保留在java源文件中。
            @Retention (RetentionPolicy . CLASS):表示该注解被保存在class文件中。
            @Retention (RetentionPolicy . RUNTIME):表示该注解被保存在class文件中，并且可以通过反射机制读取

*/


/*
// @Override这个注解只能注解方法。
// @Override这个注解是给编译器参考的,和运行阶段没有关系。
// 凡是java中的方法带有这个注解的,编译器都会进行编译检查，如果这个方法不是重写父类的方法,编译器报错。


标识性注解,给编译器做参考的。
编译器看到方法上有这个注解的时候,编译器会自动检查该方法是否重写了父类的方法。
如果没有重写，报错。
这个注解只是在编译阶段起作用,和运行期无关!

*/


/*
// Deprecated这个注解标注的元素已过时。
//这个注解主要是向其它程序员传达-个信息,告知已过时,有更好的解决方案存在。
@Deprecated

*/


/*
报错的原因:如果一个注解当中有属性,那么必须给属性赋值。（除非该属性使用default指定了默认值。）

public @interface MyAnnotation {
    /** .
    *我们通常在注解当中可以定义属性,以下这个是MyAnnotation的name属性。
    *
    看着像1个方法,但实际上我们称之为属性name。

    * @return
    */

    String name();

    /*
    颜色属性
    String color();

    /*
    年龄属性
    */
    int age() defau1t 25; //属性指定默认佴

}

//@MyAnnotation(属性名=属性值)
//指定name属性的值就好了。
@MyAnnotation(name = " zhangsan", color = "红色")
public void doSome(){
}

*/


/*
************** 如果一个注解的属性的名字是value并且只有一个属性的话的话，在使用的时候，该属性名可以省略。 **************
*/


/*
注解当中的属性可以是哪- -种类型?
    属性的类型可以是:
        byte short int Long float double boolean char String Class 枚举类型
        以及以上每-种的数组形式。

int value1();
String value2();
int[] value3();
String[] value4();
Season value5();
Season[] value6();
Class parameterType();
Class[] parameterTypes();


//数组是大括号
@OtherAnnotation(age = 25, email = {"zhangsan@123 .com"，" zhangsan@sohu.com"})
pub1ic void doSome( ){
}

//如果数组中只有1个元素:大括号可以省略。|
@OtherAnnotation(age = 25，email = "zhangsan@123. com")
public void do0ther(){
}
*/


/*
3.7、Retention的源代码
    //元注解
    public @ interface Retention {
        //属性
        RetentionPolicy value () ;
    }

        RetentionPolicy的源代码:
        public enum RetentionPolicy {
            SOURCE ,
            CLASS ,
            RUNTIME
        }

    @Re tention (value=Re tentionPolicy . RUNT IME)
    public @ interface MyAnnotation {}

*/


/*
//只允许该注解可以标注类，方法
@Target({ElementType. TYPE, ElementType .METHOD})
//希望这个注解可以被反射
@Retention(RetentionPolicy . RUNTIME)
public @interface MyAnnotation {
}
*/


/*
**************** 通过反射机制获取注解 ******************

public static void main(String[] args) {
    //获取这个类
    Class C = Class . forName( " com. bjpowernode. java. annotation5. MyAnnotationTest");
    //判断类上面是否有@MyAnnotation
    //System. out . println(c. isAnnotationPresent (MyAnnotation.class)); // true
    if(c. isAnnotat ionPresent (MyAnnotation. class)) {
        //获取该注解对象
        MyAnnotation myAnnotation = (MyAnnotat ion)c. getAnnotation(MyAnnotation. class);
        //System. out. println("类上面的注解对象”+ myAnnotation); // @com. bjpowernode . java . annotation5
        //获取注解对象的属性怎么办?和调接口没区别。
        String value = myAnnotation. value();
        System. out . println(value);
    }

    //判断String类上面是否存在这个注解
    Class stringClass = Class .forName( "java.1ang .String");
    System . out. println(stringClass. isAnnotationPresent (MyAnnotation.class)); // false
}
*/


/*
***************** 获取MyAnnotationTest的doSome()方法上面的注解信息。 *****************

@MyAnnotation(username = "admin", password = "123")
public void doSome(){
}

public static void main(String[] args) {
    //获取MyAnnotat ionTest的doSome()方法上面的注解信息。
    Class c = Class .forName( " com. bjpowernode. java. annotation6.MyAnnotationTest");

    //获取doSome()方法
    Method doSomeMethod = C. getDeclaredMethod( name: "doSome");

    //判断该方法上是否存在这个注解
    if(doSomeMethod . isAnnotat ionPresent (MyAnnotation.class)) {
        MyAnnotation myAnnotation = doSomeMethod . getAnnotat ion(MyAnnotation.class);
        System. out . println(myAnnotation. username());
        System. out . println(myAnnotation. password());
    }
}
*/


/*
************ 注释的实际应用 ******************

需求：
    这个注解只能出现在类上面，当这个类上有这个注解的时候，
    要求这个类中必须有一个int类型的id属。如果没有这个属性
    就报异常。如果有这个属性则正常执行!I

public static void main(String[] args) {
    // 获取类
    class userClass = Class.forName( "com.bjpowernode.java.annotation7.User" );1/判断类上是否存在Id注解
    boolean isOk = false; // 给一个默认的标记
    if(userClass.isAnnotationPresent(Id.class)){
        // 当一个类上面有@Id注解的时候，要求类中必须存在int类型的id属性//如果没有int类型的id属性则报异常。
        // 获取类的属性
        Field[] fields = userClass.getDeclaredFields();for(Field field : fields)i
        if( "id".equals(field.getName()) &&"int".equals(field.getType( ).getSimpleName())){
            //表示这个类是合法的类。有@Id注解，则这个类中必须有int类型的id
            isok = true; l/表示合法
            break;
        }
    }

    //判断是否合法
    if(!isOk){
        throw new HasNotIdPropertyException("被@Id注解标注的类中必须要有一个int类型的id属性!");
    }

}

// 自定义异常
public class HasNotIdPropertyException extends Runt imeException {
    public HasNotIdPropertyException(){
    }

    public HasNotIdPropertyException(String s){
        super(s);
    }
}


******** 注解有什么用？ **************


*/