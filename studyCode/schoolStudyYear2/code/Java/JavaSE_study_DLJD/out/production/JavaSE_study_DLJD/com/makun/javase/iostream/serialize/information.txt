/*
*********************** 对象流 ************************************

ObjectInputStream   反序列化
ObjectOutputStream  序列化


序列化: Serialize java对象存储到文件中。 将java对象的状态保存下来的过程。
反序列化: DeSerialize将硬盘 上的数据重新恢复到内存当中,恢复成java对象。
    ObjectOutputStream oos = new ObjectOutputStream( new FileOutputStream(" students"));

java. io. NotSerializableException  // 不支持序列化异常

参与序列化和反序列化的对象,必须实现serializable接口。

注意:通过源代码发现, Serializable接口只是一个标志接口.
    public interface Serializable {

    }
这个接口当中什么代码都没有。
那么它起到一个什么作用呢?
    起到标识的作用，标志的作用, java虚拟机看到这个类实现了这个接口，可能会对这个类进行特殊待遇。
    Serializable这个标志接口是给java虚拟机参考的, java虚拟机看到这个接口之后,会为该类自动生成
    一个序列化版本号。

一次序列化多个对象呢?
可以，可以将对象放到集合当中,序列化集合。
    参与序列化的ArrayList集合以及集合中的元素User都需要实现java. io. Serializable接口。

public class ObjectOutputStreamTest02 {
    public static void main(String[] args) throws Exception{
        List<User> userList = new ArrayList<>();

        userList .add(new User( no: 1, name: " zhangsan"));
        userList.add(new User( no: 2，name: "lisi"));
        userList .add(new User( no: 3，name: "wangwu" ));

        ObjectOutputStream oos = new ObjectOutputStream( new FileOutputStream( name: "users"));

        //序列化一个集合,这个集合对象中放了很多其他对象。
        oos . writeObject(userList);
        oos . flush();
        oos.close();
    }
}


public c1ass ObjectInputStreamTest02 {
    public static void main(String[] args) throws Exception{
        ObjectInputStream ois = new ObjectInputStream(new FileInputStream( name: "users"));

        //Object obj = ois. readObject();
        //System. out . println(obj instanceof List);

        List<User> userList = (List<User> )ois . readObject();

        for(User user : userList){
            System. out. println(user);
        }

        ois.close();
    }
}


// transient关键字表示游离的，不参与序列化。
private transient String name; // name不参序列化操作!

*/


/*
************************************ 序列化 *************************************

序列化版本号有什么用呢?
java. io. InvalidClassException:
com. bjpowernode . java . bean . Student;
local class incompatible:
stream class descSerialVersionUID = - 684255398724514298 (十年后),
Local class serialVersionUID = -3463447116624555755 (十年前)


// Java虚拟机看到Serializable接口之后,会自动生成一个序列化版本号。
//这里没有手动写出来, java虚拟机会默认提供这个序列化版本号。
//建议将序列化版本号手动的写出来。不建议自动生成
private static final 1ong serialVersionUID = 45645654345654345L;


//过了很久, Student这个类源代码改动了。
//源代码改动之后,需要重新编译,编译之后生成了全新的字书码文件。
//并且class文件再次运行的时候, java虚拟机生成的序列化版本号也会发生相应的改变。


java语言中是采用什么机制来区分类的?
第一:首先通过类名进行比对,如果类名不一样，肯定不是同一个类。
第二:如果类名一样，再怎么进行类的区别?靠序列化版本号进行区分。


小鹏编写了一个类: com. bjpowernode. java. bean. Student impl ements Serializable
胡浪编写了-个类: com. bjpowernode. java. bean. Student implements Serial izable
不同的人编写了同一个类，但“这两个类确实不是同-一个类”。这个时候序列化版本就起上作用了。
对于java虚拟机来说, java虚拟机是可以区分开这两个类的,因为这两个类都实现了Serializable接口，
都有默认的序列化版本号,他们的序列化版本号不- -样。所以区分开了。(这是自动生成序列化版本号的好处)

请思考?
    这种自动生成序列化版本号有什么缺陷?
    这种自动生成的序列化版本号缺点是:一旦代码确定之后,不能进行后续的修改,
    因为只要修改,必然会重新编译,此时会生成全新的序列化版本号,这个时候java
    虚拟机会认为这是一个全新的类。( 这样就不好了! )

最终结论:
    凡是一个类实现了Serializable接口,建议给该类提供- -一个固定不变的序列化版本号。
    这样，以后这个类即使代码修改了,但是版本号不变, java虚拟机会认为是同一个类。

// IDEA工具自动生成序列化版本号。

*/