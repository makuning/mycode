
***************************************************** MySQL *************************************************

1、 关于查询结果集的去重?
    mysql> select distinct job from emp; // distinct关键字去除重复记录。

    mysql> select ename , distinct job from emp ;
    以上的sq1语句是错误的。
    记住:distinct只能出现在所有字段的最前面。
    mysq1> select distinct deptno, job from emp ;

    案例:统计岗位的数量?
    select count (distinct job) from emp; 


2、连接查询
    2.1、什么是连接查询?
        在实际开发中，大部分的情况下都不是从单表中查询数据，一般都是多张表联合查询取出最终的结果。
        在实际开发中，一般一个业务都会对应多张表，比如:学生和班级，起码两张表。

        学生和班级信息存储到一张表中，结果就像上面- -样，数据会存在大量的重复，导致数据的冗余。

    2.2、连接查询的分类?
        根据语法出现的年代来划分的话，包括:
            SQL92 (一些老的DBA可能还在使用这种语法。DBA: DataBase Administrator, 数据库管理员)
            SQL99(比较新的语法)

        根据表的连接方式来划分，包括:
            内连接:
                等值连接
                非等值连接
                自连接

            外连接:
                左外连接(左连接)
                右外连接(右连接)

            全连接(这个不讲，很少用! )

    2.3、在表的连接查询方面有一-种现象被称为:笛卡尔积现象。(笛卡尔乘积现象)
        笛卡尔积现象:当两张表进行连接查询的时候，没有任何条件进行限制，最终的查询结果条数是两张表记录条数的乘积。

        案例:找出每-一个员工的部门名称，要求显示员工名和部门名。

        关于表的别名:
            select e.ename,d. dname from emp e,dept d;

            表的别名有什么好处?
                第一:执行效率高。
                第二:可读性好。


    2.4、怎么避免笛卡尔积现象?当然是加条件进行过滤。
        思考:避免了笛卡尔积现象，会减少记录的匹配次数吗?
            不会，次数还是56次。只不过显示的是有效记录。.
        案例:
        找出每一一个员工的部门名称，要求显示员工名和部门名。
            select
                e.ename , d. dname
            from
                empe，deptd
            where
                e.deptno = d. deptno;   // SQL92，以后不用。

    2.5、 内连接之等值连接:最大特点是:条件是等量关系。
        案例:查询每个员工的部门名称，要求显示员工名和部门名。

        sQL92: (太老，不用了)
            select
                e . ename , d. dname
            from
                emp e, dept d
            where
                e.deptno = d. deptno;

        SQL99: (常用的)
            select
                e . ename , d. dname
            from
                emp e
            join
                dept d
            on
                e. deptno = d. deptno ;

            // inner可以省略的,带着inner目的是可读性好一些。
            select .
                e . ename , d. dname
            from
                emp e
            inner join
                dept d
            on
                e.deptno = d. deptno ;


        语法:
            ...
                A
            join
                B
            on
                连接条件
            where 

        sQI99语法结构更清晰一些: 表的连接条件和后来的where条件分离了。


    2.6、 内连接之非等值连接:最大的特点是:连接条件中的关系是非等量关系。
        案例:找出每个员工的工资等级，要求显示员工名、工资、工资等级。

        // inner可以省略
        select .
            e.ename,e. sal,s.grade
        from
            emp e
        inner join
            salgrade s
        on
            e. sal between s.losal and s.hisal ;

    2.7、 自连接:最大的特点是:一张表看做两张表。自己连接自己。
        案例:找出每个员工的上级领导，要求显示员工名和对应的领导名。
        员工的领导编号 = 领导的员工编号
            select
                a.ename as '员工名' ,b.ename as '领导名'
            from
                empa.
            inner join
                emp b
            on
                a.mgr = b. empno;

    2.8、 外连接?
        什么是外连接，和内连接有什么区别?
        内连接:
            假设A和B表进行连接，使用内连接的话，凡是A表和B表能够匹配.上的记录查询出来，这就是内连接。
            AB两张表没有主副之分，两张表是平等的。

        外连接:
            假设A和B表进行连接，使用外连接的话，AB两张表中有一张表是主表，一张表是副表，主要查询主表中
            的数据，捎带着查询副表，当副表中的数据没有和主表中的数据匹配上，副表自动模拟出NULL与之匹配。

        外连接的分类?
            左外连接(左连接) :表示左边的这张表是主表。
            右外连接(右连接) :表示右边的这张表是主表。

            左连接有右连接的写法，右连接也会有对应的左连接的写法。
            outer是可以省略的。

            外连接: ( 左外连接/左连接)
                select
                    a.ename ' 员工'，b.ename !领导 1
                from
                    emp a
                left outer join
                    emp b
                on
                    a.mgr = b. empno;

            外连接: (右 外连接/右连接)|
                select
                    a.ename ' 员工'，b. ename '领导'
                from
                    emp b
                right outer join
                    emp a
                on
                    a.mgr = b. empno;

        外连接最重要的特点是:主表的数据无条件的全部查询出来。
        案例:找出哪个部门没有员工?
            select
                d. *
            from
                emp e
            right join
                dept d
            on
                e. deptno = d. deptno
            where
                e. empno is null;

    2.9、 三张表怎么连接查询?
        案例:找出每-一个员工的部门名称以及工资等级。
        注意，解释一下:
            ...
                A
            join
                B
            join
                C
            on
                ...
        表示: A表和B表先进行表连接，连接之后A表继续和c表进行连接。

            select
                e. ename，d. dname, S。grade
            from
                emp e
            join
                dept d
            on
                e. deptno = d. deptno
            join
                salgrade s
            on
                e.sal between s.losal and s.hi sal ;

        案例:找出每一一个员工的部门名称、工资等级、以及. 上级领导。
            select
                e.ename '员工' ,d. dname, s. grade ,e1.ename '领导'
            from
                emp e
            join
                dept d
            on
                e.deptno = d. deptno
            join
                salgrade s
            on
                e. sal between s .1osal and s.hisal
            1eft join
                emp e1
            on
                e.mgr = e1. empno ;

3、子查询
    3.1、什么是子查询?子查询都可以出现在哪里?
        select语句当中嵌套select语句，被嵌套的select语句是子查询。
        子查询可以出现在哪里?
            select
                ..(select)
            from
                ..(select)
            where
                ..(select)
    
    3.2、where子句中使用子查询
        案例:找出高于平均薪资的员工信息。
            select * from emp where sal > avg(sal) ; //错误的写法，where后面不能直接使用分组函数。
            第一步:找出平均薪资
            select avg (sal) from emp;

            第二步: where过滤
            select * from emp where sal > 2073.214286;

            第一-步和第二步合并:
            select * from emp where sal > (select avg(sal) from emp) ;

    3.3、from后面嵌套子查询
        案例:找出每个部门平均薪水的薪资等级。
            第一步:找出每个部门平均薪水(按照部门编号分组，求sa1的平均值)
            select deptno, avg(sal) as avgsal from emp group by deptno ;
           
            第二步:将以上的查询结果当做临时表t，让t表和salgrade s表连接，条件是: t. avgsal between s.losal and s. hisal
            select
                t.* ,s. grade
            from
                (select deptno,avg(sal) as avgsal from emp group by deptno) t
            join
                salgrade s
            on
                t. avgsal between s.losal and s .hisal;

        案例:找出每个部门平均的薪水等级。
            第一步:找出每个员工的薪水等级。
                select e. ename,e.sal,e. deptno,s.grade from emp e join salgrade s on e.sal between s.1osal and s.hisal;

            第二步:基于以上结果，继续按照deptno分组，求grade 平均值。
                select
                    e. deptno, avg (s . grade)
                from
                    emp e
                join
                    salgrade s
                on
                    e.sal between s.losal and s .hisal
                group by
                    e . deptno;

    3.4、在select后面嵌套子查询。
    案例:找出每个员工所在的部门名称，要求显示员工名和部门名。
        select 
            e.ename, (select d.dname from dept d where e.deptno = d.deptno) as dname 
        from 
            emp e;

4、union(可以将查询结果集相加)
    案例:找出工作岗位是SALESMAN和MANAGER的员工?
    第一种:
        select ename , job from emp where job ='MANAGER' or job = 'SATESMAN';
    第二种: 
        select ename,job from emp where job in ( 'MANAGER'，' SALESMAN');
    第三种:union
        select ename ,job from emp where job = 'MANAGER'union
        select ename ,job from emp where job = 'SALESMAN ';

    两张不相干的表中的数据拼接在一起显示?
        select ename from emp
        union
        select dname from dept ;

5、limit(重点中的重点,以后分页查询全靠它了。)
    5.1、limit是mysql特有的，其他数据库中没有，不通用。(oracle中有一个相同的机制，叫做rownum)

    5.2、limit取结果集中的部分数据,这时它的作用。

    5.3、语法机制:
        limit startIndex, length
        startIndex表示起始位置，从o开始，o表示第一条数据。length表示取几个

        案例:取出工资前5名的员工(思路:降序取前5个)
            select ename ,sal from emp order by sal desc;取前5个:、

            select ename ,sal from emp order by sal desc limit 0，5;
            select ename ,sal from emp order by sal desc limit 5;

    5.4、 limit是sq1语句最后执行的-一个环节:
        select      5
            ... 
        from        1
            ...
        where       2
            ...
        group by    3
            ...
        having      4
            ...     
        order by    6
            ...
        limit       7
            ...

    5.5、 案例:找出工资排名在第4到第9名的员工?
        select ename ,sal from emp order by sal desc limit 3,6;

    5.6、通用的标准分页sq1 ?每页显示3条记录:
        第1页:0,3
        第2页:3，3第3页:6，3第4页:9,3第5页:12，3

        每页显示pagesize条记录:
        第pageNo页:(pageNo - 1)* pagesize, pagesize
        pagesize是什么?是每页显示多少条记录

        pageNo是什么?显示第几页
        java代码{
            int pageNo = 2; 1/页码是2
            int pagesize = 10; 1/每页显示10条
            limit (pageNo - 1)*pagesize, pagesize
        }


6、创建表:
    建表语句的语法格式:
        create table 表名(
            字段名1数据类型，
            字段名2数据类型，
            字段名3数据类型，
            ...
        );

    关于MysQL当中字段的数据类型?以下只说常见的
        int     整数型(ava中的int)
        bigint  长整型(java中的1ong)
        float   浮点型(java中的f1oat double)
        char    定长字符串(string)
        varchar 可变长字符串(stringBuffer/stringBuilder)
        date    日期类型（对应Java中的java.sql.Date类型)
        BLOB    二进制大对象（存储图片、视频等流媒体信息)Binary Large 0Bject(对应java中的object)
        CLOB    字符大对象（存储较大文本，比如，可以存储4c的字符串。) character Large 0Bject(对应java中的Object)
        ......

    char和varchar怎么选择?
        在实际的开发中，当某个字段中的数据长度不发生改变的时候，是定长的，例如:性别、生日等都是采用char.
        当一个字段的数据长度不确定，例如:简介、姓名等都是采用varchar。

    表名在数据库当中一般建议以: t_ 或者tb1_开始。

    创建学生表:
    学生信息包括:
    学号、姓名、性别、班级编号、生日
    学号: bigint
    姓名: varchar
    性别: char
    班级编号: int
    生日:char

    create table t student (
        no bigint,
        name varchar (255) ,
        sex char (1)，
        classno varchar (255)，
        birth char (10)
    );


7、insert语句插入数据
    语法格式:
    insert into 表名(字段名1,字段名2,字段名3,....) values(值1,值2,值3,....)
    要求:字段的数量和值的数量相同，并且数据类型要对应相同。
        insert into 
            t_ student 
            (name , sex , classno,birth,no)     // 这个可省略，但是value必须按表的字段顺序添加，数量也要相同
        values
            ('lisi' , '1' , 'gaosan1ban'，'1950-10-12' ,2) ;

        // 像这样
        insert into t_ student values (1, 'jack' , 10' , 'gaosan2ban' , 11986-10-231) ;


    insert into t_ student (name) values ( 'wangwu'); //除name字段之外，剩下的所有字段自动插入NULL。

    droptableifexistst_student; //当这个表存在的话删除。

    create table t student (
        no bigint ,
        name varchar (255) ,
        sex char(1) default 1,  // 设置默认值为1
        classno varchar(255) ，
        birth char (10)
    );

    需要注意的地方:
        当一条insert语句执行成功之后，表格当中必然会多一行记录。
        即使多的这一行记录当中某些字段是NULL,后期也没有办法在执行
        insert语句插入数据了，只能使用update进行更新。

    //一次插入多行数据
        insert into t_student
            (no , name , sex , classno ,birth)
        values
            (3, 'rose' , '1'，'gaosi2ban' , '1952-12-141),
            (4, 'laotie' , '1' , 'gaosi2ban' , '1955-12-141) ;


8、表的复制
    语法:
    create table 表名as
    select语句;
    将查询结果当做表创建出来。

9、将查询结果插入到--张表中?
    mysq1> insert into dept1 select * from dept;

10、修改数据: update
    语法格式:
    update表名set 字段名1=值1,字段名2=值2... where 条件;
    注意:没有条件整张表数据全部更新。

10、修改数据: update
    语法格式:
    update表名set 字段名1=值1,字段名2=值2... where条件;
    注意:没有条件整张表数据全部更新。

    案例:将部门10的LOC修 改为SHANGHAI,将部门名称修改为RENSHIBU
        update 
            dept1 
        set 
            1oC = ' SHANGHAI'，
            dname = ' RENSHIBU' 
        where 
            deptno = 10;

11、删除数据?
    语法格式:
    delete from 表名where 条件;
    注意:没有条件全部删除。

    删除10部门数据?
    delete from dept1 where deptno = 10;

    删除所有记录?
    delete from dept1 ;

    怎么删除大表中的数据? (重点)
    truncate table 表名; //表被截断，不可回滚。永久丢失。

    删除表?
        drop table 表名; //这个通用。
        drop table if exists表名; // oracle不支持这种写法。


12、对于表结构的修改，这里不讲了，大家使用工具完成即可，因为在实际开发中表一-旦
    设计好之后，对表结构的修改是很少的，修改表结构就是对之前的设计进行了否定，即使
    需要修改表结构，我们也可以直接使用工具操作。修改表结构的语句不会出现在Java代码当中。
    出现在java代码当中的sq1包括: insert delete update select (这些都是表中的数据操作。)

    增删改查有一一个术语: CRUD操作
    Create (增) Retrieve (检索) Update (修改) Delete (删除)

13、约束(Constraint)
    13.1、什么是约束?常见的约束有哪些呢?
        在创建表的时候，可以给表的字段添加相应的约束，添加约束的目的是为了保证表中数据的
        合法性、有效性、完整性。
        
        常见的约束有哪些呢?
            非空约束(notnu1l):约束的字段不能为NULL
            唯一约束(unique):约束的字段不能重复
            主键约束(primary ikey):约束的字段既不能为NULL,也不能重复(简称PK)
            外键约束(foreign key): ... (简称Fk)
            检查约束(check):注意oracle数据库有check约束，但是mysq1没有，目前mysql不支持该约束。

    13.2、非空约束not null
        drop table if exists t user;

        create table t user (
            id int,
            username varchar (255) not null,
            password varchar (255)
        );

