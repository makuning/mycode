
***************************************************** MySQL *************************************************

1、约束
    1.1、唯一性约束( unique )
    唯一约束修饰的字段具有唯一-性,不能重复。但可以为NULL.

    案例:给某一 列添加unique
    drop table if exists t user ;
    create table t user (
        id int ,
        username varchar (255) unique   // 唯一性约束，可以为null，但是有值的话，这个值不能重复 （列级约束）
    );

    案例:给两个列或者多个列添加unique
        drop table if exists t user ;
        create table t user (
            id int,
            usercode varchar (255)，
            username varchar (255)，
            unique (usercode,username)  //多个字段联合起来添加1个约束unique （表级约束）
        );

    注意: not nu11约束只有列级约束。没有表级约束。

    1.2、主键约束
        怎么给一张表添加主键约束呢?
        drop table if exists t user;

        create table t user (
            id int primary key,     // 设置为主键
            username varchar (255) , 
            email varchar (255)
        );

        根据以上的测试得出: id是主键，因为添加了主键约束，主键字段中的数据不能为NULL,也不能重复。
        主键的特点:不能为NULL,也不能重复。

        主键相关的术语?
            主键约束: primary key
            主键字段: id字 段添加primary key之后，id叫做主 键字段
            主键值:id字段中的每一-个值都是主键值。

        主键有什么作用?
            -表的设计三范式中有要求，第一- 范式就要求任何- -张表都应该有主键。
            -主键的作用:主键值是这行记录在这张表当中的唯一 标识。(就像-一个人的身份证号码- -样。)

        主键的分类?
            根据主键字段的字段数量来划分:
            单一主键(推荐的，常用的。)
            复合主键(多个字段联合起来添加一个主键约束) (复合主键不建议使用，因为复合主键违背三范式。)

            根据主键性质来划分:
                自然主键:主键值最好就是一个和业务没有任何关系的自然数。(这种方式是推荐的)
                业务主键:主键值和系统的业务挂钩，例如:拿着银行卡的卡号做主键，拿着身份证号码作为主键。(不推荐用)
                    最好不要拿着和业务挂钩的字段作为主键。因为以后的业务一旦发生改变的时候，主键值可能也需要
                    随着发生变化，但有的时候没有办法变化，因为变化可能会导致主键值重复。

            一张表的主键约束只能有1个。( 必须记住)

        以吓内容是演示以下复合主键,不需要掌握:
        drop table if exists t user ;

        create table t user (
            id int,
            username varchar (255) ,
            password varchar (255)，
            primary key (id, username)  // 表级约束，复合主键
        );

        mysq1提供主键值自增:
        drop table if exists t user;
            create table t_ user (
            id int primary key auto_ increment,     // id字段自动维护-一个自增的数字，从1开始，以1递增。
            username varchar (255)
        );

        提示:Oracle当中也提供了一一个 自增机制，叫做:序列(sequence )


    1.3、外键约束
        关于外键约束的相关术语:
        外键约束: foreign key
        外键字段:添加有外键约束的字段
        外键值:外键字段中的每--一个值。

        业务背景:
        请设计数据库表，用来维护学生和班级的信息?
        第一种方案:--张表存储所有数据
        no (pk)         name        classno                         classname
        ----------------------------------------------------------------------------------------
        1               zs1             101             北京大兴区经济技术开发区亦庄二二中高三1班
        2               zs2             102             北京大兴区经济技术开发区亦庄二二中高三2班
        3               zs3             102             北京大兴区经济技术开发区亦庄二二中高三2班
        4               zs4             103             北京大兴区经济技术开发区亦庄二二中高三3班        
        缺点:冗余。【不推荐】

        第二种方案:两张表(班级表和学生表)
            t_ class班级表  
            cno (pk)                    cname
            -------------------------------------------------------
            101             北京大兴区经济技术开发区亦庄二中高三1班
            102             北京大兴区经济技术开发区亦庄二中高三2班

            t_ student 学生表
            sno (pk)        sname       cno(该字段添加外键约束fk)
            -------------------------------------------------------
            1               zs1                 101
            2               zs2                 101
            3               zs3                 102
            4               zs4                 102
            5               zs5                 102

        将以_上表的建表语句写出来:
        t_ student中的classno字段引用t_ class表中的cno字段，此时t_ student表叫做子表。t_ class表叫做父表。

        顺序要求:
            删除数据的时候，先删除子表，再删除父表。
            添加数据的时候，先添加父表，在添加子表。
            创建表的时候，先创建父表，再创建子表。
            删除表的时候，先删除子表，在删除父表。

        // 先删子再删父
        drop table if exists t student;
        drop table if exists t class;

        // 先创父后创子
        create table t class (
            cno int ,
            cname varchar (255) ,
            primary key (cno)
        );

        create table t student (
            sno int,
            sname varchar (255)，
            classno int,
            foreign key (classno) references t_ class (cno)         // 固定写法
            foreign key (本表作为外键的字段名) references 外键参照的表名 (外键参照的表的字段名)
        );

        // 插入数据，先加父后加子
        insert into t class values (101, ' XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') ;
        insert into t_ class values (102 , 'yYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY') ;
        
        insert into t_ student values(1, 'zs1' ,101) ;
        insert into t_ student values(2, 'zs2' ,101) ;
        insert into t_ student values(3, 'zs3' ,102) ;
        insert into t_ student values(4, 'zs4' ,102) ;
        insert into t_ student values(5, 'zs5' ,102) ;
        insert into t_ student values(6, 'zs6' ,102) ;

        外键值可以为NULL?
            外键可以为NULL。

        外键字段引用其他表的某个字段的时候，被引用的字段必须是主键吗?
            注意:被引用的字段不一定是主键，但至少具有unique约束。

2、存储引擎?
    2.1、完整的建表语句
        CREATE TABLE `t_x` (
            `id` int (11) DEFAULT NULL
        ) ENGINE=InnoDB DEFAUIT CHARSET= =utf8;

        注意:在MysQL当中，凡是标识符是可以使用飘号括起来的。最好别用，不通用。
            建表的时候可以指定存储引擎，也可以指定字符集。
            mysql默认使用的存储引擎是InnoDB方式。
            默认采用的字符集是UTF8

    2.2、什么是存储引擎呢?
        存储引擎这个名字只有在mysql中存在。(oracle中有 对应的机制，但是不叫做存储引擎。Oracle中没有特殊的名字,
        就是“表的存储方式")
        mysql支持很多存储引擎，每--个存储引擎都对应了一种不同的存储方式。
        每一个存储引擎都有自己的优缺点，需要在合适的时机选择合适的存储引擎。

    2.3、查看当前mysq1支持的存储引擎?
        show engines \G

        mysql 5.5.36版本 支持的存储引擎有9个:

    2.4、 常见的存储引擎?
        Engine: MyISAM
                Support: YES
                Comment: MyISAM storage engine
           Transactions: Nd
                     XA: NO
             Savepoints: NO

        MyISAM存储引擎是MySQL最常用的引擎。
        它管理的表具有以下特征: 
        使用三个文件表示每个表: 
        格式文件-存储表结构的定义(mytable.frm) 

        数据文件一存储表行的内容 ( mytable.MYD) 
        索引文件-存储表上索引( mytable.MYI) 

        MyISAM这种存储引擎不支持事务。
        MyISAM是mysql最常用的存储引擎，但是这种引擎不是默认的。

        MyISAM采用三个文件组织一张表:
        xxx. frm   (存储格式的文件)
        XXX . MYD  (存储表中数据的文件)
        XXX .MYI(存储表中索引的文件)
        优点:可被压缩，节省存储空间。并且可以转换为只读表，提高检素效率。
        缺点:不支持事务。

        ==================================================================

        Engine: InnoDB
                    Support: DEFAULT
                    Comment: Supports transactions, row- level locking, and foreign keys
               Transactions: YES
                         XA: YES
                 Savepoints: YES

        优点:支持事务、行级锁、外键等。这种存储引擎数据的安全得到保障。
        表的结构存储在xxx.frm文件中
        数据存储在tablespace这样的表空间中(逻辑概念)，无法被压缩,无法转换成只读。
        这种InnoDB存储引擎在MySQL数据库崩溃之,后提供自动恢复机制。I
        InnoDB支持级联删除和级联更新。

        ==================================================================

        Engine : MEMORY
                 Support: YES
                 Comment: Hash based, stored in memory, useful for temporary tables
            Transactions: NO
                      XA: NO
              Savepoints: NO

            缺点:不支持事务。数据容易丢失。因为所有数据和索引都是存储在内存当中的。
            优点:查询速度最快。
            以前叫做HEPA引擎。

